class UnionFind:
    def __init__(self, size):
        self.parent = [i for i in range(size)]
        self.rank = [1] * size

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])

        return self.parent[x]

    def union(self, x, y):
        root_x, root_y = self.find(x), self.find(y)
        if root_x == root_y:
            return

        self.parent[root_y] = root_x
        self.rank[root_x] += self.rank[root_y]

        return

    # returns the rank of the group
    def getRank(self, x):
        return self.rank[self.find(x)]


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        # union find, returns the node that has the node with the largest size component, break the tie by index
        # undirected graph
        n = len(graph)
        uf = UnionFind(n)
        for i in range(n):
            for j in range(i+1, n):
                if graph[i][j]:
                    uf.union(i, j)

        counter = Counter(uf.find(node) for node in initial)
        candidate_node = min(initial)
        # we are trying to find the largest group that only contain a single intial node
        candidate_group_size = 0

        for node in initial:
            if counter[uf.find(node)] > 1:
                continue
            group_size = uf.getRank(node)
            if group_size > candidate_group_size:
                candidate_group_size = group_size
                candidate_node = node
            elif group_size == candidate_group_size and node < candidate_node:
                # when we see the same group size but a node with smaller index, we also need to update the candidate
                candidate_node = node

        return candidate_node
